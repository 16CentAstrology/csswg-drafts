<pre class=metadata>
Title: CSS Easing Functions Level 2
Status: ED
Prepare for TR: no
Work Status: exploring
Shortname: css-easing
Level: 2
Group: csswg
ED: https://drafts.csswg.org/css-easing/
TR: https://www.w3.org/TR/css-easing-2/
Editor: Brian Birtles, Mozilla https://www.mozilla.org/, bbirtles@mozilla.com, w3cid 43194
Editor: Dean Jackson, Apple Inc https://www.apple.com/, dino@apple.com, w3cid 42080
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact, w3cid 42199
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Former Editor: Matt Rakow, Microsoft, w3cid 62267
Former Editor: Shane Stephens, Google, shans@google.com, w3cid 47691
Former Editor: Jake Archibald, Google, jakearchibald@google.com, w3cid 76394
Implementation Report: https://wpt.fyi/results/css/css-easing
Markup Shorthands: markdown yes
Indent: 2

Abstract: This CSS module describes a way for authors to define a transformation
    that controls the rate of change of some value.
    Applied to animations, such transformations can be used to produce
    animations that mimic physical phenomena such as momentum or to cause the
    animation to move in discrete steps producing robot-like movement.
    Level 2 adds more sophisticated functions for custom easing curves.

!Participate: IRC: <a href="ircs://irc.w3.org:6667/css">#css</a> on W3C's IRC
Repository: w3c/csswg-drafts
WPT Path Prefix: css/css-easing/
WPT Display: closed
!Tests: <a href="https://github.com/web-platform-tests/wpt/tree/master/css/css-easing">web-platform-tests css/css-easing</a>
</pre>

<style>
.easing-graph {
  max-width: 400px;
  width: 100%;
}
@media (prefers-color-scheme: dark) {
  .easing-graph {
    background: none;
  }
}
</style>
<style>
/* Creates an easing example. Use like <div style="--easing: linear"></div>. */
.easing-track {
  position: relative;
  height: 1em;
  background: linear-gradient(to bottom, transparent calc(50% - 1px), var(--a-normal-underline) 0 calc(50% + 1px), transparent 0);
  min-width: 200px;
  margin: .5em;
}
.easing-track::before {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  box-sizing: border-box;
  border-radius: 50%;
  background: var(--bg);
  border: medium solid var(--text);
  left: 0;
  animation: --easing-track var(--easing) 3s infinite;
}
@keyframes --easing-track {
  to { left: calc(100% - 1em); }
}
</style>
<style>
/* Put nice boxes around each algorithm. */
[data-algorithm]:not(.heading) {
  padding: .5em;
  border: thin solid #ddd; border-radius: .5em;
  margin: .5em calc(-0.5em - 1px);
}
[data-algorithm]:not(.heading) > :first-child {
  margin-top: 0;
}
[data-algorithm]:not(.heading) > :last-child {
  margin-bottom: 0;
}
[data-algorithm] [data-algorithm] {
    margin: 1em 0;
}
</style>

Introduction {#introduction}
============================

<em>This section is not normative.</em>

It is often desirable to control the rate at which some value changes.
For example, gradually increasing the speed at which an element moves can
give the element a sense of weight as it appears to gather momentum.
This can be used to produce intuitive user interface elements or convincing
cartoon props that behave like their physical counterparts.
Alternatively, it is sometimes desirable for animation to move forwards in
distinct steps such as a segmented wheel that rotates such that the segments
always appear in the same position.

Similarly, controlling the rate of change of gradient interpolation can be
used to produce different visual effects such as suggesting a concave or convex
surface, or producing a striped effect.

[=Easing functions=] provide a means to transform such values by taking an
input progress value and producing a corresponding transformed output progress
value.

<figure>
  <img class="easing-graph" src="images/easing-function-example.svg" width="535" height="510"
    alt="Example of an easing function that produces an ease-in effect.">
  <figcaption>
    Example of an easing function that produces an ease-in effect.<br>
    Given an input progress of 0.7, the easing function scales the
    value to produce an output progress of 0.52.<br>
    Applying this easing function to an animation would cause it to progress
    more slowly at first but then gradually progress more quickly.
  </figcaption>
</figure>

<h3 id="values">
Value Definitions</h3>

  This specification uses the <a href="https://www.w3.org/TR/css-values-3/#value-defs">value definition syntax</a> from [[!CSS-VALUES-3]].
  Value types not defined in this specification are defined in CSS Values &amp; Units [[!CSS-VALUES-3]].
  Combination with other CSS modules may expand the definitions of these value types.

<h2 id=easing-functions oldids=timing-functions>Easing functions</h2>

An <dfn export lt="easing function|timing function">easing function</dfn> takes
an [=input progress value=] and produces an [=output progress value=].

An [=easing function=] must be a pure function meaning that for a given set of
inputs, it always produces the same [=output progress value=].

The <dfn>input progress value</dfn> is a real number in the range [-&infin;,
&infin;].
Typically, the [=input progress value=] is in the range [0, 1] but this may
not be the case when [=easing functions=] are chained together.

<div class=note>

An example of when easing functions are chained together occurs in
Web Animations [[WEB-ANIMATIONS]]
where the output of the easing function specified on an animation effect
may become the input to an easing function specified on
one of the keyframes of a keyframe effect.
In this scenario,
the input to the easing function on the keyframe effect
may be outside the range [0, 1].

</div>

The <dfn>output progress value</dfn> is a real number in the
range [-&infin;, &infin;].

Note: While CSS numbers have a theoretically infinite range
(see [[css-values-4#numeric-ranges]])
UAs will automatically clamp enormous numbers to a reasonable range.
If easing functions are used outside of the CSS context,
care must be taken to either correctly handle potential infinities,
or clamp the [=output progress value=].

Some types of easing functions also take an additional boolean <dfn export for="easing function">before flag</dfn>,
which is defined subsequently.

This specification defines four types of easing functions whose definitions
follow.

The syntax for specifying an [=easing function=] is as follows:

<div class="prod"><dfn type>&lt;easing-function&gt;</dfn> =
  <<linear-easing-function>> |
  <<cubic-bezier-easing-function>> |
  <<step-easing-function>></div>

<wpt>
  timing-functions-syntax-computed.html
  timing-functions-syntax-invalid.html
  timing-functions-syntax-valid.html
</wpt>

<!-- Big Text: linear 

█▌    ████ █    █▌ █████▌  ███▌  ████▌ 
█▌     ▐▌  █▌   █▌ █▌     ▐█ ▐█  █▌  █▌
█▌     ▐▌  ██▌  █▌ █▌     █▌  █▌ █▌  █▌
█▌     ▐▌  █▌▐█ █▌ ████   █▌  █▌ ████▌ 
█▌     ▐▌  █▌  ██▌ █▌     █████▌ █▌▐█  
█▌     ▐▌  █▌   █▌ █▌     █▌  █▌ █▌ ▐█ 
█████ ████ █▌   ▐▌ █████▌ █▌  █▌ █▌  █▌
-->

<h3 id=the-linear-easing-function>
Linear Easing Functions: ''linear'', ''linear()''</h3>

A <dfn export>linear easing function</dfn>
is an [=easing function=]
that interpolates linearly
between its [=linear()/control points=].
Each <dfn for="linear()">control point</dfn>
is a pair of numbers,
associating an [=input progress value=]
to an [=output progress value=].

<figure>
  <img class="easing-graph" src="images/linear-easing-curve.svg" width="535" height="510"
      alt="A linear curve used as an easing function.">
  <figcaption>
    ''linear(0, .1 25%, .75 50%, 1)''<br>
    The shape of the curve follows the [=linear()/control points=].<br>
    Input progress values serve as <var>x</var> values of the curve,
    whilst the <var>y</var> values are the output progress values.
  </figcaption>
</figure>

A [=linear easing function=] has the following syntax:

<pre class="prod">
  <dfn>&lt;linear-easing-function></dfn> = linear | <<linear()>>
  <dfn>linear()</dfn> = linear( [ <<number>> && <<percentage>>{0,2} ]# )
</pre>

<wpt>
  linear-timing-functions-syntax.html
</wpt>

: ''linear''
:: Equivalent to ''linear(0, 1)''

: ''linear()''
::
  Specifies a [=linear easing function=].

  Each comma-separated argument specifies one or two [=linear()/control points=],
  with an [=input progress value=] equal to the specified <<percentage>>
  (converted to a <<number>> between 0 and 1),
  and an [=output progress value=] equal to the specified <<number>>.
  When the argument has two <<percentage>>s,
  it defines two [=linear()/control points=] in the specified order,
  one per <<percentage>>.

  If an argument lacks a <<percentage>>,
  its [=input progress value=] is initially empty,
  but that is immediately corrected by [=linear() canonicalization=] after parsing.

<div algorithm>
  To <dfn export lt="linear() canonicalization|canonicalize a linear()">canonicalize a linear()</dfn> function's [=linear()/control points=],
  perform the following:

  1. If the first [=control point=] lacks an [=input progress value=],
    set its [=input progress value=] to 0.

  2. If the last [=control point=] lacks an [=input progress value=],
    set its [=input progress value=] to 1.

  3. If any [=control point=] has an [=input progress value=]
    that is less than the [=input progress value=] of any preceding [=control point=],
    set its [=input progress value=] to the largest [=input progress value=]
    of any preceding [=control point=].

  4. If any [=control point=] still lacks an [=input progress value=],
    then for each contiguous run of such [=linear()/control points=],
    set their [=input progress values=]
    so that they are evenly spaced
    between the preceding and following [=linear()/control points=]
    with [=input progress values=].

  After canonicalization,
  every [=control point=] has an [=input progress value=],
  and the [=input progress values=] are monotonically non-decreasing
  along the list.

  Note: Serialization relies on whether or not an [=input progress value=]
  was originally supplied,
  so that information should be retained
  in the [=CSS/internal representation=].
  It does not rely on whether a pair of [=linear()/control points=]
  were specified as two percentages on a single argument
  or as separate arguments.
</div>


<h4 id=linear-easing-function-serializing>
Serializing</h4>

The ''linear'' keyword is serialized as itself.

<div algorithm>
  To <dfn export>serialize a linear() function</dfn>:

  1. Let |s| be the string "linear(".
  2. [=serialize a linear() control point|Serialize each control point=] of the function,
    [=string/concatenate=] the results using the separator ", ",
    and append the result to |s|.
  3. Append ")" to |s|,
    and return it.
</div>

<div algorithm>
  To <dfn export>serialize a linear() control point</dfn>:

  1. Let |s| be the serialization,
    as a <<number>>,
    of the [=control point's=] [=output progress value=].

  2. If the [=control point=] originally lacked an [=input progress value=],
    return |s|.

  3. Otherwise, append " " (U+0020 SPACE) to |s|,
    then serialize the [=control point's=] [=input progress value=]
    as a <<percentage>>
    and append it to |s|.

  4. Return |s|.
</div>

<div class=example>
  When serialized,
  [=linear()/control points=] originally specified with two [=input progress values=]
  are turned into two separate [=linear()/control points=],
  and the [=input progress values=] are in strictly ascending order.
  For example:

    - ''linear(0, 0.25, 1)'' serializes as ''linear(0, 0.25, 1)''
    - ''linear(0 20%, 0.5 10%, 1)'' serializes as ''linear(0 20%, 0.5 20%, 1)''
    - ''linear(0, 0.25 25% 75%, 1)'' serializes as ''linear(0, 0.25 25%, 0.25 75%, 1)''
</div>


<h4 id=linear-easing-function-output>
Output</h4>

<div algorithm>

  To <dfn export>calculate linear easing output progress</dfn>
  for a given [=linear easing function=] |func|,
  an [=input progress value=] |inputProgress|,
  and an optional [=before flag=] (defaulting to false),
  perform the following.
  It returns an [=output progress value=].

  1. Let |points| be |func|'s [=linear()/control points=].

  2. If |points| holds only a single item,
    return the [=output progress value=]
    of that item.

  3. If at least one of |points| has an [=input progress value=]
    matching |inputProgress|:

    * If the [=before flag=] is true,
      return the [=output progress value=] of the first such point.
    * Otherwise,
      return the [=output progress value=] of the last such point.

  4. Otherwise, find two [=linear()/control points=],
    |A| and |B|,
    which will be used for interpolation:

    1. If |inputProgress| is smaller
      than any [=input progress value=] in |points|,
      let |A| and |B| be the first two items in |points|.
      If |A| and |B| have the same [=input progress value=],
      return |A|'s [=output progress value=].

    2. Otherwise, if |inputProgress| is larger
      than any [=input progress value=] in |points|,
      let |A| and |B| be the last two items in |points|.
      If |A| and |B| have the same [=input progress value=],
      return |B|'s [=output progress value=].

    3. Otherwise, let |A| be the last [=linear()/control point=]
      whose [=input progress value=] is smaller than |inputProgress|,
      and let |B| be the first [=linear()/control point=]
      whose [=input progress value=] is larger than |inputProgress|.

  5. Linearly interpolate (or extrapolate) |inputProgress|
    along the line defined by |A| and |B|,
    and return the result.
</div>

<wpt>
  linear-timing-functions-output.html
</wpt>

<h4 id=linear-easing-function-examples>
Examples</h4>

<div class=example>
  ''linear()'' allows the definition of easing functions that interpolate linearly between a set of points.

  For example, ''linear(0, 0.25, 1)'' produces an easing function
  that moves linearly from 0, to 0.25, then to 1:

  <figure>
    <img class="easing-graph" src="images/simple-linear-example.svg" width="535" height="510"
      alt="linear(0, 0.25, 1) plotted on a graph">
  </figure>

  <figure>
    <table>
      <thead>
        <tr><th>Easing<th>Example
      <tbody>
        <tr><td>''linear''<td><div class=easing-track style="--easing:linear"></div>
        <tr><td>''linear(0, .25, 1)''<td><div class=easing-track style="--easing:linear(0, .25, 1)"></div>
    </table>
    <figcaption>
      An example of the above, with a plain ''linear'' for contrast.
    </figcaption>
  </figure>
</div>

<div class=example>
  By default, values are spread evenly between entries that don't have an explicit "input".
  Input values can be provided using a <<percentage>>.

  For example, ''linear(0, 0.25 75%, 1)'' produces the following easing function,
  which spends 75% of the time transitioning from ''0'' to ''.25'',
  then the last 25% transitioning from ''.25'' to ''1'':

  <figure>
    <img class="easing-graph" src="images/linear-with-input-example.svg" width="535" height="510"
      alt="linear(0, 0.25 75%, 1) plotted on a graph.
        The graph has three points.
        The first is at 0,0.
        The second is at 0.75,0.25.
        The third is at 1,1.">
  </figure>

  <figure>
    <table>
      <thead>
        <tr><th>Easing<th>Example
      <tbody>
        <tr><td>''linear''<td><div class=easing-track style="--easing:linear"></div>
        <tr><td>''linear(0, .25 75%, 1)''<td><div class=easing-track style="--easing:linear(0, .25 75%, 1)"></div>
    </table>
    <figcaption>
      An example of the above, with a plain ''linear'' for contrast.
    </figcaption>
  </figure>
</div>
</div>

<div class=example>
  If two input values are provided for a single output,
  it results in two points with the same output,
  causing the easing to "pause" between the two inputs.

  For example, ''linear(0, 0.25 25% 75%, 1)''
  is equivalent to ''linear(0, 0.25 25%, 0.25 75%, 1)'',
  producing the following easing function:

  <figure>
    <img class="easing-graph" src="images/linear-with-double-input-example.svg" width="535" height="510"
      alt="linear(0, 0.25 75%, 1) plotted on a graph.
        The graph has four points.
        The first is at 0,0.
        The second is at 0.25,0.25.
        The third is at 0.75,0.25.
        The forth is at 1,1.">
  </figure>

  <figure>
    <table>
      <thead>
        <tr><th>Easing<th>Example
      <tbody>
        <tr><td>''linear''<td><div class=easing-track style="--easing:linear"></div>
        <tr><td>''linear(0, 0.25 25% 75%, 1)''<td><div class=easing-track style="--easing:linear(0, 0.25 25% 75%, 1)"></div>
    </table>
    <figcaption>
      An example of the above, with a plain ''linear'' for contrast.
    </figcaption>
  </figure>
</div>
</div>

<div class=example>
  If the input is outside the range provided,
  the trajectory of the nearest two points is continued.

  For example, here are the implicit values from the previous function:

  <figure>
    <img class="easing-graph" src="images/linear-with-double-input-example-continued.svg" width="535" height="510"
      alt="linear(0, 0.25 75%, 1) plotted on a graph.
        The graph has four points.
        The first is at 0,0.
        The second is at 0.25,0.25.
        The third is at 0.75,0.25.
        The forth is at 1,1.
        The ends of the graph are extended at the angle of the nearest two lines.">
  </figure>
</div>

<div class=example>
  A typical use of ''linear()'' is to provide many points to create the illusion of a curve.

  For example, here's how ''linear()'' could be used to create a reusable "bounce" easing function:

  ```css
  :root {
    --bounce: linear(
      /* Start to 1st bounce */
      0, 0.063, 0.25, 0.563, 1 36.4%,
      /* 1st to 2nd bounce */
      0.812, 0.75, 0.813, 1 72.7%,
      /* 2nd to 3rd bounce */
      0.953, 0.938, 0.953, 1 90.9%,
      /* 3rd bounce to end */
      0.984, 1 100% 100%
    );
  }

  .example {
    animation-timing-function: var(--bounce);
  }
  ```

  The definition ends `1 100% 100%` to create two final points,
  so inputs greater than 1 always output 1.

  <figure>
    <img class="easing-graph" src="images/linear-bounce-example.svg" width="535" height="510"
      alt="The graph of a rough bounce easing.">
  </figure>

  <figure>
    <table>
      <thead>
        <tr><th>Easing<th>Example
      <tbody>
        <tr><td>''linear''<td><div class=easing-track style="--easing:linear"></div>
        <tr><td>''linear(...)''<td><div class=easing-track style="--easing:linear(0, 0.063, 0.25, 0.563, 1 36.4%, 0.812, 0.75, 0.813, 1 72.7%, 0.953, 0.938, 0.953, 1 90.9%, 0.984, 1 100% 100% )"></div>
    </table>
    <figcaption>
      An example of the above, with a plain ''linear'' for contrast.
    </figcaption>
  </figure>

  More points could be used to create a smoother result,
  which may be needed for slower animations.
</div>


<!-- Big Text: bezier

████▌  █████▌ █████▌ ████ █████▌ ████▌ 
█▌  █▌ █▌         ▐▌  ▐▌  █▌     █▌  █▌
█▌  █▌ █▌        ▐▌   ▐▌  █▌     █▌  █▌
█████  ████     █▌    ▐▌  ████   ████▌ 
█▌  █▌ █▌      █      ▐▌  █▌     █▌▐█  
█▌  █▌ █▌     █       ▐▌  █▌     █▌ ▐█ 
████▌  █████▌ █████▌ ████ █████▌ █▌  █▌
-->

<h3 id=cubic-bezier-easing-functions oldids=cubic-bezier-timing-functions>
Cubic Bézier Easing Functions:
''ease'', ''ease-in'', ''ease-out'', ''ease-in-out'', ''cubic-bezier()''</h3>

A <dfn export>cubic Bézier easing function</dfn>
is an [=easing function=] that interpolates smoothly from 0 to 1
using a cubic polynomial,
influenced by two control points <var>P1</var> and <var>P2</var>
that the curve will approach
but (usually) not actually reach.
(The "endpoints" of the cubic Bézier,
referred to as <var>P0</var> and <var>P3</var>,
are fixed at (0,0) and (1,1), respectively.)

<figure>
  <img class="easing-graph" src="images/cubic-bezier-easing-curve.svg" width="535" height="510"
      alt="A cubic Bezier curve used as an easing function.">
  <figcaption>
    A cubic Bézier curve used as an easing function.<br>
    The shape of the curve is determined by the location of the control
    points <var>P1</var> and <var>P2</var>.<br>
    Input progress values serve as <var>x</var> values of the curve,
    whilst the <var>y</var> values are the output progress values.
  </figcaption>
</figure>

A <a>cubic Bézier easing function</a> has the following syntax:

<pre class="prod">
  <dfn>&lt;cubic-bezier-easing-function></dfn> =
    ''ease'' | ''ease-in'' | ''ease-out'' | ''ease-in-out'' | <<cubic-bezier()>>

  <dfn>cubic-bezier()</dfn> = cubic-bezier( [ <<number [0,1]>>, <<number>> ]#{2} )
</pre>

The meaning of each value is as follows:

<dl dfn-type="value" dfn-for="<cubic-bezier-easing-function>">

: <dfn>ease-in</dfn>
:: A function that starts slowly and smoothly, then quickly approaches the endpoint with an almost linear curve.
  Equivalent to ''cubic-bezier(0.42, 0, 1, 1)''.
: <dfn>ease-out</dfn>
:: A function that starts quickly with an almost linear curve, then slowly and smoothly approaches the endpoint.
  Equivalent to ''cubic-bezier(0, 0, 0.58, 1)''.
: <dfn>ease-in-out</dfn>
:: A function that starts and ends slowly and smoothly, quickly traversing the middle part.
  Equivalent to ''cubic-bezier(0.42, 0, 0.58, 1)''.
: <dfn>ease</dfn>
:: Similar to ''ease-in-out'', but with a quicker start and a slower finish.
  Equivalent to ''cubic-bezier(0.25, 0.1, 0.25, 1)''.
:   ''cubic-bezier( x1, y1, x2, y2 )''
::  Specifies a <a>cubic Bézier easing function</a>.
    The <var ignore>x1</var> and <var ignore>y1</var> arguments
    specify the <var>P1</var> control point,
    and <var ignore>x2</var> and <var ignore>y2</var> arguments
    specify the <var>P2</var> control point.

    Both <var ignore>x</var> values must be in the range [0, 1]
    or the definition is invalid.

</dl>

The keyword values listed above are illustrated below.

<figure>
  <img class="easing-graph" src="images/curve-keywords.svg" width="500"
      alt="The easing functions produced by keyword values.">
  <figcaption>
    The easing functions produced by each of the cubic Bézier easing
    function keyword values.
  </figcaption>
</figure>

<figure>
  <table>
    <thead>
      <tr><th>Easing<th>Example
    <tbody>
      <tr><td>''ease-in''<td><div class=easing-track style="--easing:ease-in"></div>
      <tr><td>''ease-out''<td><div class=easing-track style="--easing:ease-out"></div>
      <tr><td>''ease-in-out''<td><div class=easing-track style="--easing:ease-in-out"></div>
      <tr><td>''ease''<td><div class=easing-track style="--easing:ease"></div>
  </table>
  <figcaption>
    The above easing functions in action, each applied to a 3s animation of the circles' 'left' property.
  </figcaption>
</figure>


<h4 id=cubic-bezier-algo>
Output</h4>

The mapping from input progress to output progress is performed by
determining the corresponding <var>y</var> value ([=output progress value=]) for
a given <var>x</var> value ([=input progress value=]).
The evaluation of this curve is covered in many sources such as
[[FUND-COMP-GRAPHICS]].

For [=input progress values=] outside the range [0, 1], the curve is extended
infinitely using tangent of the curve at the closest endpoint as follows:

*   For [=input progress values=] less than zero,

    1.   If the <var>x</var> value of <var>P1</var> is greater than zero, use
         a straight line that passes through <var>P1</var> and <var>P0</var> as the tangent.

    1.   Otherwise, if the <var>x</var> value of <var>P2</var> is greater than
         zero, use a straight line that passes through <var>P2</var> and <var>P0</var> as the tangent.

    1.   Otherwise, let the [=output progress value=] be zero for all
         [=input progress values=] in the range [-&infin;, 0).

*   For [=input progress values=] greater than one,

    1.   If the <var>x</var> value of <var>P2</var> is less than one, use
         a straight line that passes through <var>P2</var> and <var>P3</var> as the tangent.

    1.   Otherwise, if the <var>x</var> value of <var>P1</var> is less than
         one, use a straight line that passes through <var>P1</var> and <var>P3</var> as the tangent.

    1.   Otherwise, let the [=output progress value=] be one for all
         [=input progress values=] in the range (1, &infin;].

<wpt>
  cubic-bezier-timing-functions-output.html
</wpt>


<!-- Big Text: steps

 ███▌  █████▌ █████▌ ████▌   ███▌ 
█▌  █▌   █▌   █▌     █▌  █▌ █▌  █▌
█▌       █▌   █▌     █▌  █▌ █▌    
 ███▌    █▌   ████   ████▌   ███▌ 
    █▌   █▌   █▌     █▌         █▌
█▌  █▌   █▌   █▌     █▌     █▌  █▌
 ███▌    █▌   █████▌ █▌      ███▌ 
-->

<h3 id=step-easing-functions oldids=step-timing-functions>
Step Easing Functions:
''step-start'', ''step-end'', ''steps()''</h3>

A <dfn>step easing function</dfn> is an [=easing function=]
that divides the input time into a specified number of intervals that
are equal in length,
and holds the output steady within each of those intervals.
It is defined by a number of <dfn for=steps()>steps</dfn>, and a <dfn for=steps()>step position</dfn>.
It has the following syntax:

<pre class="prod">
  <dfn>&lt;step-easing-function></dfn> = ''step-start'' | ''step-end'' | <<steps()>>

  <dfn>steps()</dfn> = steps( <<integer>>, <<step-position>>?)
  <dfn type>&lt;step-position></dfn> = ''jump-start'' | ''jump-end'' | ''jump-none'' | ''jump-both''
                | ''start'' | ''end''
</pre>

<wpt>
  step-timing-functions-syntax.html
</wpt>

The meaning of each value is as follows:

<dl dfn-type=value dfn-for="<step-easing-function>, steps()">
  :   <dfn>step-start</dfn>
  :: Jumps from the starting to the ending value
    at the start of the easing interval.

    Computes to ''steps(1, start)''
  :   <dfn>step-end</dfn>
  :: Jumps from the starting to the ending value
    at the end of the easing interval.

    Computes to ''steps(1, end)''

      <figure>
        <img class="easing-graph" src="images/step-easing-keyword-examples.svg" width="500"
            alt="Example step easing keywords.">
        <figcaption>
          Example step easing function keyword values.
        </figcaption>
      </figure>

  :   ''steps( &lt;integer&gt;, &lt;step-position&gt;? )''
  :: Divides the input interval into a number of equal steps
    specified by the <<integer>>.
    Within each interval, the [=output progress value=] is constant,
    and is determined according to the <<step-position>> keyword.
    If omitted, the <<step-position>> keyword defaults to ''end''.

    If the <<step-position>> is ''jump-none'',
    the <<integer>> must be at least 2,
    or the function is invalid.
    Otherwise,
    the <<integer>> must be at least 1,
    or the function is invalid.

    The <<step-position>> keywords are:

    <dl dfn-type=value dfn-for="<step-position>, steps()">
      : <dfn>jump-start</dfn>
      :: The first interval has an [=output progress value=] of <code>1/steps</code>,
        and subsequent intervals rise by <code>1/steps</code>.

        (It "jumps at the start", with no step returning 0.)
      : <dfn>jump-end</dfn>
      :: The first interval has an [=output progress value=] of <code>0</code>,
        and subsequent intervals rise by <code>1/steps</code>.

        (It "jumps at the end", with no step returning 1.)
      : <dfn>jump-none</dfn>
      :: The first interval has an [=output progress value=] of <code>0</code>,
        and subsequent intervals rise by <code>1/(steps-1)</code>.

        (It "never jumps", with steps returning both 0 and 1.)
      : <dfn>jump-both</dfn>
      :: The first interval has an [=output progress value=] of <code>1/(steps+1)</code>,
        and subsequent intervals rise by <code>1/(steps+1)</code>.

        (It "jumps at both ends", with no steps returning 0 or 1.)
      : <dfn>start</dfn>
      ::  Behaves as ''jump-start''.
      : <dfn>end</dfn>
      ::  Behaves as ''jump-end''.
    </dl>
</dl>

The ''jump-*'' keywords values are illustrated below:

<figure>
  <img class="easing-graph" src="images/step-easing-func-examples.svg" width="500"
      alt="Example step easing functions.">
  <figcaption>
    Example step easing functions.
  </figcaption>
</figure>

<figure>
  <table>
    <thead>
      <tr><th>Easing<th>Example
    <tbody>
      <tr><td>''linear''<td><div class=easing-track style="--easing:linear"></div>
      <tr><td>''steps(3, jump-start)''<td><div class=easing-track style="--easing:steps(3, jump-start)"></div>
      <tr><td>''steps(3, jump-end)''<td><div class=easing-track style="--easing:steps(3, jump-end)"></div>
      <tr><td>''steps(3, jump-none)''<td><div class=easing-track style="--easing:steps(3, jump-none)"></div>
      <tr><td>''steps(3, jump-both)''<td><div class=easing-track style="--easing:steps(3, jump-both)"></div>
  </table>
  <figcaption style="max-width: 80%;">
    The above easing functions in action, with a ''linear'' provided for comparison.
    Each ''steps(3, ...)'' function divides the animation into three constant periods;
    they differ only on what the value is within each period.
  </figcaption>
</figure>

</dl>

<h4 id=step-easing-algo oldids=step-timing-function-algo>
Output</h4>

<div class=algorithm>
  To <dfn export>calculate step easing output progress</dfn>
  for a given [=step easing function=] |func|,
  an [=input progress value=] |inputProgress|,
  and an optional [=before flag=] (defaulting to false),
  perform the following.
  It returns an [=output progress value=].

  1. Let |steps| be |func|'s [=steps()/steps=],
    and |position| be |func|'s [=steps()/step position=].

  2. Divide the interval [-&infin;, &infin;] into several segments,
    each with an associated value,
    as follows:

    1. [-&infin;, 0] has the value 0.
    2. [1, &infin;] has the value 1.
    3. [0, 1] is divided into |steps| intervals,
      with their values assigned as defined for the |position|
      (see <<step-position>>).

    Note: All intervals are inclusive,
    so some values are part of two intervals at once.

  3. If |inputProgress| is in a single interval,
    return the associated value for that interval.

  4. Otherwise, |inputProgress| is in two intervals,
    with two associated values
    (which might be the same).

    If the [=before flag=] is true,
    return the smaller associated value;
    otherwise, return the larger associated value.
</div>

<div class=example>

  As an example of how the [=before flag=] affects the behavior of this function,
  consider an animation with a [=step easing function=] whose [=step
  position=] is <a value for="steps()">start</a> and which has a positive
  delay and backwards fill.

  For example, using CSS animation:

  <pre class='lang-css'>
  animation: moveRight 5s 1s steps(5, start);
  </pre>

  During the delay phase, the [=input progress value=] will be zero but if the
  [=before flag=] is set to indicate that the animation has yet to reach its
  animation interval, the easing function will produce zero as its [=output
  progress value=], i.e. the bottom of the first step.

  At the exact moment when the animation interval begins, the [=input progress
  value=] will still be zero, but the [=before flag=] will not be set and hence
  the result of the easing function will correspond to the top of the first step.
</div>

For the purposes of calculating the [=output progress value=], the
[=step position=] <a value for="steps()">start</a> is considered equivalent to
<a value for="steps()">jump-start</a>.
Likewise <a value for="steps()">end</a> is considered equivalent to <a value
for="steps()">jump-end</a>.
As a result, the following algorithm does not make explicit reference to
<a value for="steps()">start</a> or <a value for="steps()">end</a>.

Note: User agents must still differentiate between
<a value for="steps()">jump-start</a> and <a value for="steps()">start</a> for
the purpose of serialization (see [[#serialization]]).

The [=output progress value=] is calculated from the [=input progress value=]
and [=before flag=] as follows:

1.   Calculate the <var>current step</var> as
     <code>floor([=input progress value=] &times; [=steps=])</code>.

1.   If the [=step position=] property is one of:

     * <a value for="steps()">jump-start</a>,
     * <a value for="steps()">jump-both</a>,

     increment <var>current step</var> by one.

1.   If <em>both</em> of the following conditions are true:

     *   the [=before flag=] is set, <em>and</em>
     *   [=input progress value=] &times; [=steps=] mod 1 equals zero
         (that is, if [=input progress value=] &times; [=steps=] is
         integral), then

     decrement <var>current step</var> by one.

1.   If [=input progress value=] &ge; 0 and <var>current step</var> &lt; 0,
     let <var>current step</var> be zero.

1.   Calculate |jumps| based on the [=step position=] as follows:

      :   <a value for="steps()">jump-start</a> or
          <a value for="steps()">jump-end</a>
      ::  [=steps=]
      :   <a value for="steps()">jump-none</a>
      ::  [=steps=] - 1
      :   <a value for="steps()">jump-both</a>
      ::  [=steps=] + 1

1.   If [=input progress value=] &le; 1 and <var>current step</var> &gt;
     |jumps|, let <var>current step</var> be |jumps|.

     <div class=note>

     Steps 4 and 6 in this procedure ensure that given an [=input progress
     value=] in the range [0, 1], a step easing function does not produce an
     [=output progress value=] outside that range.

     For example, although mathematically we might expect that a step easing
     function with a [=step position=] of <a value for="steps()">jump-start</a>
     would step up (i.e. beyond 1) when the [=input progress value=] is 1,
     intuitively,
     when we apply such an easing function to a forwards-filling animation,
     we expect it to produce an [=output progress value=] of 1
     as the animation fills forwards.

     A similar situation arises for a step easing function with
     a [=step position=] of <a value for="steps()">jump-end</a>
     when applied to an animation during its delay phase.

     </div>

1.   The [=output progress value=] is <code><var>current step</var> /
     |jumps|</code>.

<wpt>
  step-timing-functions-output.html
</wpt>

<h3 id=serialization oldids=serializing-a-timing-function>Serialization</h3>

Easing functions are serialized using the common serialization patterns
defined in [[CSSOM]] with the following additional requirements:

*   The keyword values ''ease'', ''linear'', ''ease-in'', ''ease-out'',
    and ''ease-in-out'' are serialized as-is, that is, they are
    <em>not</em> converted to the equivalent ''cubic-bezier()'' or
    ''linear()'' function before serializing.

*   Step easing functions, whether they are specified using the
    ''steps()'' function or either of the ''step-start'' or ''step-end''
    keywords, are serialized as follows:

    1.   If the [=step position=] is ''jump-end'' or ''end'', serialize
         as <a lt="steps()" function>steps(&lt;integer&gt;)</a>.

    2.   Otherwise, serialize as <a lt="steps()"
         function>steps(&lt;integer&gt;, &lt;step-position&gt;)</a>.

*   A [=linear easing function=] created via ''linear()''
    is serialized by getting its [=linear easing function/serialized computed value=].

<wpt>
  timing-functions-syntax-computed.html
</wpt>

<h2 class=no-num id=privacy>Privacy Considerations</h2>

<!-- Horizontal review wants Security and Privacy sections to be separate. -->

No new privacy considerations have been reported on this specification.

This specification does not directly introduce any new capabilities to the
Web platform but rather provides common definitions that may be referenced by
other specifications.

<h2 class=no-num id=security>Security Considerations</h2>

Specifications referencing the features defined in this specification
should consider that while easing functions most commonly
take an [=input progress value=] in the range [0,1]
and produce an [=output progress value=] in the range [0, 1],
this is not always the case.
Applications of easing functions should
define the behavior for inputs and outputs outside this range
to ensure they do not introduce new security considerations.

Changes {#changes}
=======

<h3 id="changes-20240828">
Changes since the FPWD of <a href="https://www.w3.org/TR/2024/WD-css-easing-2-20240828/">28 August 2024</a>
</h3>

<ul>
  <li></li>
</ul>

<h3 id="changes-L1">
Additions Since Level 1</h3>

- Added ''linear()'' function.

Acknowledgements {#acknowledgements}
================

This specification is based on the <a
href="https://www.w3.org/TR/css3-transitions/">CSS Transitions</a> specification
edited by L.  David Baron, Dean Jackson, David Hyatt, and Chris Marrin.
The editors would also like to thank Douglas Stockwell, Steve Block, Tab Atkins,
Rachel Nabors, Martin Pitt, and the <a
href="https://damp-lake-50659.herokuapp.com/">Animation at Work</a> slack
community for their feedback and contributions.
